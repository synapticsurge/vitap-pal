// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'api/vtop/client.dart';
import 'api/vtop/parseattn.dart';
import 'api/vtop/parsecoursepg.dart';
import 'api/vtop/parsemarks.dart';
import 'api/vtop/parsesched.dart';
import 'api/vtop/parsett.dart';
import 'api/vtop/types.dart';
import 'api/vtop/wifi.dart';
import 'api/vtop_main.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 1759655570;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_vitapmate',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  String crateApiVtopClientIclientAutoAccessorGetCaptcha({
    required Iclient that,
  });

  String crateApiVtopClientIclientAutoAccessorGetCsrf({required Iclient that});

  bool crateApiVtopClientIclientAutoAccessorGetLoginactive({
    required Iclient that,
  });

  String crateApiVtopClientIclientAutoAccessorGetUsername({
    required Iclient that,
  });

  void crateApiVtopClientIclientAutoAccessorSetCaptcha({
    required Iclient that,
    required String captcha,
  });

  void crateApiVtopClientIclientAutoAccessorSetCsrf({
    required Iclient that,
    required String csrf,
  });

  void crateApiVtopClientIclientAutoAccessorSetLoginactive({
    required Iclient that,
    required bool loginactive,
  });

  void crateApiVtopClientIclientAutoAccessorSetUsername({
    required Iclient that,
    required String username,
  });

  Future<(bool, String)> crateApiVtopClientIclientGetAttendance({
    required Iclient that,
    required String semid,
  });

  Future<(bool, String)> crateApiVtopClientIclientGetAttendancePage({
    required Iclient that,
  });

  Future<(bool, String)> crateApiVtopClientIclientGetCourseClasses({
    required Iclient that,
    required String semid,
    required String classid,
  });

  Future<(bool, String)> crateApiVtopClientIclientGetCourseCourses({
    required Iclient that,
    required String semid,
  });

  Future<(bool, String)> crateApiVtopClientIclientGetCourseDlist({
    required Iclient that,
    required String semid,
    required String classid,
    required String erpId,
  });

  Future<(bool, String)> crateApiVtopClientIclientGetCoursePage({
    required Iclient that,
  });

  Future<(bool, String)> crateApiVtopClientIclientGetExamShedule({
    required Iclient that,
    required String semid,
  });

  Future<(bool, String)> crateApiVtopClientIclientGetExamSheduleSems({
    required Iclient that,
  });

  Future<(bool, String)> crateApiVtopClientIclientGetFullAttendance({
    required Iclient that,
    required String courseId,
    required String semid,
    required String courseType,
  });

  Future<String?> crateApiVtopClientIclientGetLoginPageError({
    required Iclient that,
  });

  Future<(bool, String)> crateApiVtopClientIclientGetMarksList({
    required Iclient that,
    required String semid,
  });

  Future<(bool, String)> crateApiVtopClientIclientGetMarksPage({
    required Iclient that,
  });

  Future<(bool, String)> crateApiVtopClientIclientGetTimetable({
    required Iclient that,
    required String semid,
  });

  Future<(bool, String)> crateApiVtopClientIclientGetTimetablePage({
    required Iclient that,
  });

  Future<(bool, String)> crateApiVtopClientIclientLogin({
    required Iclient that,
    required String cap,
  });

  Future<(bool, String)> crateApiVtopClientIclientLoginPageload({
    required Iclient that,
  });

  Future<Iclient> crateApiVtopClientIclientNew();

  Future<void> crateApiVtopClientIclientUpdateCred({
    required Iclient that,
    required String username,
    required String password,
  });

  Future<void> crateApiVtopMainCheckClient({
    required Iclient iclient,
    required String username,
    required String password,
  });

  Iclient crateApiVtopMainGetClient();

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  Future<(bool, String)> crateApiVtopMainOnstartRun({
    required Iclient iclient,
    required String username,
    required String password,
  });

  Future<List<RAtCourse>> crateApiVtopParseattnParseAttendance({
    required String html,
  });

  Future<String> crateApiVtopParsecoursepgParseClasses({required String html});

  Future<String> crateApiVtopParsecoursepgParseCourses({required String html});

  Future<String> crateApiVtopParsecoursepgParseDlist({required String html});

  Future<List<RAttendanceList>> crateApiVtopParseattnParseFullAttendance({
    required String html,
  });

  Future<String> crateApiVtopParsemarksParseMarks({required String html});

  Future<String> crateApiVtopParseschedParseSchedule({required String html});

  Future<String> crateApiVtopParsecoursepgParseSemid({required String html});

  Future<List<String>> crateApiVtopParseattnParseSemidAttendance({
    required String html,
  });

  Future<String> crateApiVtopParsemarksParseSemidMarks({required String html});

  Future<String> crateApiVtopParseschedParseSemidSchedule({
    required String html,
  });

  Future<List<String>> crateApiVtopParsettParseSemidTimetable({
    required String html,
  });

  Future<List<RTimetable>> crateApiVtopParsettParseTimetable({
    required String html,
  });

  Future<(bool, String, List<RAtCourse>)> crateApiVtopMainRustAttendance({
    required Iclient client,
    required String semid,
  });

  Future<(bool, String, List<RAttendanceList>)>
  crateApiVtopMainRustFullAttendance({
    required Iclient client,
    required String semid,
    required String courseId,
    required String courseType,
  });

  Future<(bool, String, List<RTimetable>)> crateApiVtopMainRustTimetable({
    required Iclient client,
    required String semid,
  });

  Future<(bool, String, List<String>)> crateApiVtopMainRustTimetableSemid({
    required Iclient client,
  });

  Future<(bool, String)> crateApiVtopWifiWifiLoginLogout({
    required int i,
    required String username,
    required String password,
  });

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Iclient;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Iclient;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_IclientPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String crateApiVtopClientIclientAutoAccessorGetCaptcha({
    required Iclient that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientAutoAccessorGetCaptchaConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientAutoAccessorGetCaptchaConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_auto_accessor_get_captcha",
        argNames: ["that"],
      );

  @override
  String crateApiVtopClientIclientAutoAccessorGetCsrf({required Iclient that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientAutoAccessorGetCsrfConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientAutoAccessorGetCsrfConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_auto_accessor_get_csrf",
        argNames: ["that"],
      );

  @override
  bool crateApiVtopClientIclientAutoAccessorGetLoginactive({
    required Iclient that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiVtopClientIclientAutoAccessorGetLoginactiveConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiVtopClientIclientAutoAccessorGetLoginactiveConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_auto_accessor_get_loginactive",
        argNames: ["that"],
      );

  @override
  String crateApiVtopClientIclientAutoAccessorGetUsername({
    required Iclient that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientAutoAccessorGetUsernameConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiVtopClientIclientAutoAccessorGetUsernameConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_auto_accessor_get_username",
        argNames: ["that"],
      );

  @override
  void crateApiVtopClientIclientAutoAccessorSetCaptcha({
    required Iclient that,
    required String captcha,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          sse_encode_String(captcha, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientAutoAccessorSetCaptchaConstMeta,
        argValues: [that, captcha],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientAutoAccessorSetCaptchaConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_auto_accessor_set_captcha",
        argNames: ["that", "captcha"],
      );

  @override
  void crateApiVtopClientIclientAutoAccessorSetCsrf({
    required Iclient that,
    required String csrf,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          sse_encode_String(csrf, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientAutoAccessorSetCsrfConstMeta,
        argValues: [that, csrf],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientAutoAccessorSetCsrfConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_auto_accessor_set_csrf",
        argNames: ["that", "csrf"],
      );

  @override
  void crateApiVtopClientIclientAutoAccessorSetLoginactive({
    required Iclient that,
    required bool loginactive,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          sse_encode_bool(loginactive, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiVtopClientIclientAutoAccessorSetLoginactiveConstMeta,
        argValues: [that, loginactive],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiVtopClientIclientAutoAccessorSetLoginactiveConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_auto_accessor_set_loginactive",
        argNames: ["that", "loginactive"],
      );

  @override
  void crateApiVtopClientIclientAutoAccessorSetUsername({
    required Iclient that,
    required String username,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          sse_encode_String(username, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientAutoAccessorSetUsernameConstMeta,
        argValues: [that, username],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiVtopClientIclientAutoAccessorSetUsernameConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_auto_accessor_set_username",
        argNames: ["that", "username"],
      );

  @override
  Future<(bool, String)> crateApiVtopClientIclientGetAttendance({
    required Iclient that,
    required String semid,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          sse_encode_String(semid, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientGetAttendanceConstMeta,
        argValues: [that, semid],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientGetAttendanceConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_get_attendance",
        argNames: ["that", "semid"],
      );

  @override
  Future<(bool, String)> crateApiVtopClientIclientGetAttendancePage({
    required Iclient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientGetAttendancePageConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientGetAttendancePageConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_get_attendance_page",
        argNames: ["that"],
      );

  @override
  Future<(bool, String)> crateApiVtopClientIclientGetCourseClasses({
    required Iclient that,
    required String semid,
    required String classid,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          sse_encode_String(semid, serializer);
          sse_encode_String(classid, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientGetCourseClassesConstMeta,
        argValues: [that, semid, classid],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientGetCourseClassesConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_get_course_classes",
        argNames: ["that", "semid", "classid"],
      );

  @override
  Future<(bool, String)> crateApiVtopClientIclientGetCourseCourses({
    required Iclient that,
    required String semid,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          sse_encode_String(semid, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientGetCourseCoursesConstMeta,
        argValues: [that, semid],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientGetCourseCoursesConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_get_course_courses",
        argNames: ["that", "semid"],
      );

  @override
  Future<(bool, String)> crateApiVtopClientIclientGetCourseDlist({
    required Iclient that,
    required String semid,
    required String classid,
    required String erpId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          sse_encode_String(semid, serializer);
          sse_encode_String(classid, serializer);
          sse_encode_String(erpId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientGetCourseDlistConstMeta,
        argValues: [that, semid, classid, erpId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientGetCourseDlistConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_get_course_dlist",
        argNames: ["that", "semid", "classid", "erpId"],
      );

  @override
  Future<(bool, String)> crateApiVtopClientIclientGetCoursePage({
    required Iclient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientGetCoursePageConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientGetCoursePageConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_get_course_page",
        argNames: ["that"],
      );

  @override
  Future<(bool, String)> crateApiVtopClientIclientGetExamShedule({
    required Iclient that,
    required String semid,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          sse_encode_String(semid, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientGetExamSheduleConstMeta,
        argValues: [that, semid],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientGetExamSheduleConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_get_exam_shedule",
        argNames: ["that", "semid"],
      );

  @override
  Future<(bool, String)> crateApiVtopClientIclientGetExamSheduleSems({
    required Iclient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientGetExamSheduleSemsConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientGetExamSheduleSemsConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_get_exam_shedule_sems",
        argNames: ["that"],
      );

  @override
  Future<(bool, String)> crateApiVtopClientIclientGetFullAttendance({
    required Iclient that,
    required String courseId,
    required String semid,
    required String courseType,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          sse_encode_String(courseId, serializer);
          sse_encode_String(semid, serializer);
          sse_encode_String(courseType, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientGetFullAttendanceConstMeta,
        argValues: [that, courseId, semid, courseType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientGetFullAttendanceConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_get_full_attendance",
        argNames: ["that", "courseId", "semid", "courseType"],
      );

  @override
  Future<String?> crateApiVtopClientIclientGetLoginPageError({
    required Iclient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientGetLoginPageErrorConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientGetLoginPageErrorConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_get_login_page_error",
        argNames: ["that"],
      );

  @override
  Future<(bool, String)> crateApiVtopClientIclientGetMarksList({
    required Iclient that,
    required String semid,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          sse_encode_String(semid, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientGetMarksListConstMeta,
        argValues: [that, semid],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientGetMarksListConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_get_marks_list",
        argNames: ["that", "semid"],
      );

  @override
  Future<(bool, String)> crateApiVtopClientIclientGetMarksPage({
    required Iclient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientGetMarksPageConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientGetMarksPageConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_get_marks_page",
        argNames: ["that"],
      );

  @override
  Future<(bool, String)> crateApiVtopClientIclientGetTimetable({
    required Iclient that,
    required String semid,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          sse_encode_String(semid, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientGetTimetableConstMeta,
        argValues: [that, semid],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientGetTimetableConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_get_timetable",
        argNames: ["that", "semid"],
      );

  @override
  Future<(bool, String)> crateApiVtopClientIclientGetTimetablePage({
    required Iclient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientGetTimetablePageConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientGetTimetablePageConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_get_timetable_page",
        argNames: ["that"],
      );

  @override
  Future<(bool, String)> crateApiVtopClientIclientLogin({
    required Iclient that,
    required String cap,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          sse_encode_String(cap, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientLoginConstMeta,
        argValues: [that, cap],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientLoginConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_login",
        argNames: ["that", "cap"],
      );

  @override
  Future<(bool, String)> crateApiVtopClientIclientLoginPageload({
    required Iclient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientLoginPageloadConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientLoginPageloadConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_login_pageload",
        argNames: ["that"],
      );

  @override
  Future<Iclient> crateApiVtopClientIclientNew() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientNewConstMeta =>
      const TaskConstMeta(debugName: "Iclient_new", argNames: []);

  @override
  Future<void> crateApiVtopClientIclientUpdateCred({
    required Iclient that,
    required String username,
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            that,
            serializer,
          );
          sse_encode_String(username, serializer);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopClientIclientUpdateCredConstMeta,
        argValues: [that, username, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopClientIclientUpdateCredConstMeta =>
      const TaskConstMeta(
        debugName: "Iclient_update_cred",
        argNames: ["that", "username", "password"],
      );

  @override
  Future<void> crateApiVtopMainCheckClient({
    required Iclient iclient,
    required String username,
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            iclient,
            serializer,
          );
          sse_encode_String(username, serializer);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopMainCheckClientConstMeta,
        argValues: [iclient, username, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopMainCheckClientConstMeta =>
      const TaskConstMeta(
        debugName: "check_client",
        argNames: ["iclient", "username", "password"],
      );

  @override
  Iclient crateApiVtopMainGetClient() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopMainGetClientConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopMainGetClientConstMeta =>
      const TaskConstMeta(debugName: "get_client", argNames: []);

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGreetConstMeta,
        argValues: [name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta =>
      const TaskConstMeta(debugName: "greet", argNames: ["name"]);

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 30,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Future<(bool, String)> crateApiVtopMainOnstartRun({
    required Iclient iclient,
    required String username,
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            iclient,
            serializer,
          );
          sse_encode_String(username, serializer);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 31,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopMainOnstartRunConstMeta,
        argValues: [iclient, username, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopMainOnstartRunConstMeta => const TaskConstMeta(
    debugName: "onstart_run",
    argNames: ["iclient", "username", "password"],
  );

  @override
  Future<List<RAtCourse>> crateApiVtopParseattnParseAttendance({
    required String html,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 32,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_r_at_course,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParseattnParseAttendanceConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopParseattnParseAttendanceConstMeta =>
      const TaskConstMeta(debugName: "parse_attendance", argNames: ["html"]);

  @override
  Future<String> crateApiVtopParsecoursepgParseClasses({required String html}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 33,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParsecoursepgParseClassesConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopParsecoursepgParseClassesConstMeta =>
      const TaskConstMeta(debugName: "parse_classes", argNames: ["html"]);

  @override
  Future<String> crateApiVtopParsecoursepgParseCourses({required String html}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 34,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParsecoursepgParseCoursesConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopParsecoursepgParseCoursesConstMeta =>
      const TaskConstMeta(debugName: "parse_courses", argNames: ["html"]);

  @override
  Future<String> crateApiVtopParsecoursepgParseDlist({required String html}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 35,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParsecoursepgParseDlistConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopParsecoursepgParseDlistConstMeta =>
      const TaskConstMeta(debugName: "parse_dlist", argNames: ["html"]);

  @override
  Future<List<RAttendanceList>> crateApiVtopParseattnParseFullAttendance({
    required String html,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 36,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_r_attendance_list,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParseattnParseFullAttendanceConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopParseattnParseFullAttendanceConstMeta =>
      const TaskConstMeta(
        debugName: "parse_full_attendance",
        argNames: ["html"],
      );

  @override
  Future<String> crateApiVtopParsemarksParseMarks({required String html}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 37,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParsemarksParseMarksConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopParsemarksParseMarksConstMeta =>
      const TaskConstMeta(debugName: "parse_marks", argNames: ["html"]);

  @override
  Future<String> crateApiVtopParseschedParseSchedule({required String html}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 38,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParseschedParseScheduleConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopParseschedParseScheduleConstMeta =>
      const TaskConstMeta(debugName: "parse_schedule", argNames: ["html"]);

  @override
  Future<String> crateApiVtopParsecoursepgParseSemid({required String html}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 39,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParsecoursepgParseSemidConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopParsecoursepgParseSemidConstMeta =>
      const TaskConstMeta(debugName: "parse_semid", argNames: ["html"]);

  @override
  Future<List<String>> crateApiVtopParseattnParseSemidAttendance({
    required String html,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 40,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParseattnParseSemidAttendanceConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopParseattnParseSemidAttendanceConstMeta =>
      const TaskConstMeta(
        debugName: "parse_semid_attendance",
        argNames: ["html"],
      );

  @override
  Future<String> crateApiVtopParsemarksParseSemidMarks({required String html}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 41,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParsemarksParseSemidMarksConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopParsemarksParseSemidMarksConstMeta =>
      const TaskConstMeta(debugName: "parse_semid_marks", argNames: ["html"]);

  @override
  Future<String> crateApiVtopParseschedParseSemidSchedule({
    required String html,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 42,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParseschedParseSemidScheduleConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopParseschedParseSemidScheduleConstMeta =>
      const TaskConstMeta(
        debugName: "parse_semid_schedule",
        argNames: ["html"],
      );

  @override
  Future<List<String>> crateApiVtopParsettParseSemidTimetable({
    required String html,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 43,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParsettParseSemidTimetableConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopParsettParseSemidTimetableConstMeta =>
      const TaskConstMeta(
        debugName: "parse_semid_timetable",
        argNames: ["html"],
      );

  @override
  Future<List<RTimetable>> crateApiVtopParsettParseTimetable({
    required String html,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 44,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_r_timetable,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopParsettParseTimetableConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopParsettParseTimetableConstMeta =>
      const TaskConstMeta(debugName: "parse_timetable", argNames: ["html"]);

  @override
  Future<(bool, String, List<RAtCourse>)> crateApiVtopMainRustAttendance({
    required Iclient client,
    required String semid,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            client,
            serializer,
          );
          sse_encode_String(semid, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 45,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string_list_r_at_course,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopMainRustAttendanceConstMeta,
        argValues: [client, semid],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopMainRustAttendanceConstMeta =>
      const TaskConstMeta(
        debugName: "rust_attendance",
        argNames: ["client", "semid"],
      );

  @override
  Future<(bool, String, List<RAttendanceList>)>
  crateApiVtopMainRustFullAttendance({
    required Iclient client,
    required String semid,
    required String courseId,
    required String courseType,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            client,
            serializer,
          );
          sse_encode_String(semid, serializer);
          sse_encode_String(courseId, serializer);
          sse_encode_String(courseType, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 46,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_bool_string_list_r_attendance_list,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopMainRustFullAttendanceConstMeta,
        argValues: [client, semid, courseId, courseType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopMainRustFullAttendanceConstMeta =>
      const TaskConstMeta(
        debugName: "rust_full_attendance",
        argNames: ["client", "semid", "courseId", "courseType"],
      );

  @override
  Future<(bool, String, List<RTimetable>)> crateApiVtopMainRustTimetable({
    required Iclient client,
    required String semid,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            client,
            serializer,
          );
          sse_encode_String(semid, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 47,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string_list_r_timetable,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopMainRustTimetableConstMeta,
        argValues: [client, semid],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopMainRustTimetableConstMeta =>
      const TaskConstMeta(
        debugName: "rust_timetable",
        argNames: ["client", "semid"],
      );

  @override
  Future<(bool, String, List<String>)> crateApiVtopMainRustTimetableSemid({
    required Iclient client,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
            client,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 48,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string_list_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopMainRustTimetableSemidConstMeta,
        argValues: [client],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopMainRustTimetableSemidConstMeta =>
      const TaskConstMeta(
        debugName: "rust_timetable_semid",
        argNames: ["client"],
      );

  @override
  Future<(bool, String)> crateApiVtopWifiWifiLoginLogout({
    required int i,
    required String username,
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_i_32(i, serializer);
          sse_encode_String(username, serializer);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 49,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_bool_string,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiVtopWifiWifiLoginLogoutConstMeta,
        argValues: [i, username, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiVtopWifiWifiLoginLogoutConstMeta =>
      const TaskConstMeta(
        debugName: "wifi_login_logout",
        argNames: ["i", "username", "password"],
      );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Iclient =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Iclient =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient;

  @protected
  Iclient
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IclientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Iclient
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IclientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Iclient
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IclientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Iclient
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IclientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<RAtCourse> dco_decode_list_r_at_course(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_r_at_course).toList();
  }

  @protected
  List<RAttendanceList> dco_decode_list_r_attendance_list(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_r_attendance_list).toList();
  }

  @protected
  List<RTimetable> dco_decode_list_r_timetable(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_r_timetable).toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  RAtCourse dco_decode_r_at_course(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 12)
      throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return RAtCourse(
      serial: dco_decode_String(arr[0]),
      category: dco_decode_String(arr[1]),
      courseName: dco_decode_String(arr[2]),
      courseCode: dco_decode_String(arr[3]),
      courseType: dco_decode_String(arr[4]),
      facultyDetail: dco_decode_String(arr[5]),
      classesAttended: dco_decode_String(arr[6]),
      totalClasses: dco_decode_String(arr[7]),
      attendancePercentage: dco_decode_String(arr[8]),
      attendenceFatCat: dco_decode_String(arr[9]),
      debarStatus: dco_decode_String(arr[10]),
      courseId: dco_decode_String(arr[11]),
    );
  }

  @protected
  RAttendanceList dco_decode_r_attendance_list(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return RAttendanceList(
      serial: dco_decode_String(arr[0]),
      date: dco_decode_String(arr[1]),
      slot: dco_decode_String(arr[2]),
      dayTime: dco_decode_String(arr[3]),
      status: dco_decode_String(arr[4]),
      remark: dco_decode_String(arr[5]),
    );
  }

  @protected
  RTimetable dco_decode_r_timetable(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return RTimetable(
      serial: dco_decode_String(arr[0]),
      day: dco_decode_String(arr[1]),
      slot: dco_decode_String(arr[2]),
      courseCode: dco_decode_String(arr[3]),
      courseType: dco_decode_String(arr[4]),
      roomNo: dco_decode_String(arr[5]),
      block: dco_decode_String(arr[6]),
      startTime: dco_decode_String(arr[7]),
      endTime: dco_decode_String(arr[8]),
      name: dco_decode_String(arr[9]),
    );
  }

  @protected
  (bool, String) dco_decode_record_bool_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_bool(arr[0]), dco_decode_String(arr[1]));
  }

  @protected
  (bool, String, List<RAtCourse>)
  dco_decode_record_bool_string_list_r_at_course(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_bool(arr[0]),
      dco_decode_String(arr[1]),
      dco_decode_list_r_at_course(arr[2]),
    );
  }

  @protected
  (bool, String, List<RAttendanceList>)
  dco_decode_record_bool_string_list_r_attendance_list(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_bool(arr[0]),
      dco_decode_String(arr[1]),
      dco_decode_list_r_attendance_list(arr[2]),
    );
  }

  @protected
  (bool, String, List<RTimetable>)
  dco_decode_record_bool_string_list_r_timetable(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_bool(arr[0]),
      dco_decode_String(arr[1]),
      dco_decode_list_r_timetable(arr[2]),
    );
  }

  @protected
  (bool, String, List<String>) dco_decode_record_bool_string_list_string(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_bool(arr[0]),
      dco_decode_String(arr[1]),
      dco_decode_list_String(arr[2]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  Iclient
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IclientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Iclient
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IclientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Iclient
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IclientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Iclient
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IclientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<RAtCourse> sse_decode_list_r_at_course(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <RAtCourse>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_r_at_course(deserializer));
    }
    return ans_;
  }

  @protected
  List<RAttendanceList> sse_decode_list_r_attendance_list(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <RAttendanceList>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_r_attendance_list(deserializer));
    }
    return ans_;
  }

  @protected
  List<RTimetable> sse_decode_list_r_timetable(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <RTimetable>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_r_timetable(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RAtCourse sse_decode_r_at_course(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_serial = sse_decode_String(deserializer);
    var var_category = sse_decode_String(deserializer);
    var var_courseName = sse_decode_String(deserializer);
    var var_courseCode = sse_decode_String(deserializer);
    var var_courseType = sse_decode_String(deserializer);
    var var_facultyDetail = sse_decode_String(deserializer);
    var var_classesAttended = sse_decode_String(deserializer);
    var var_totalClasses = sse_decode_String(deserializer);
    var var_attendancePercentage = sse_decode_String(deserializer);
    var var_attendenceFatCat = sse_decode_String(deserializer);
    var var_debarStatus = sse_decode_String(deserializer);
    var var_courseId = sse_decode_String(deserializer);
    return RAtCourse(
      serial: var_serial,
      category: var_category,
      courseName: var_courseName,
      courseCode: var_courseCode,
      courseType: var_courseType,
      facultyDetail: var_facultyDetail,
      classesAttended: var_classesAttended,
      totalClasses: var_totalClasses,
      attendancePercentage: var_attendancePercentage,
      attendenceFatCat: var_attendenceFatCat,
      debarStatus: var_debarStatus,
      courseId: var_courseId,
    );
  }

  @protected
  RAttendanceList sse_decode_r_attendance_list(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_serial = sse_decode_String(deserializer);
    var var_date = sse_decode_String(deserializer);
    var var_slot = sse_decode_String(deserializer);
    var var_dayTime = sse_decode_String(deserializer);
    var var_status = sse_decode_String(deserializer);
    var var_remark = sse_decode_String(deserializer);
    return RAttendanceList(
      serial: var_serial,
      date: var_date,
      slot: var_slot,
      dayTime: var_dayTime,
      status: var_status,
      remark: var_remark,
    );
  }

  @protected
  RTimetable sse_decode_r_timetable(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_serial = sse_decode_String(deserializer);
    var var_day = sse_decode_String(deserializer);
    var var_slot = sse_decode_String(deserializer);
    var var_courseCode = sse_decode_String(deserializer);
    var var_courseType = sse_decode_String(deserializer);
    var var_roomNo = sse_decode_String(deserializer);
    var var_block = sse_decode_String(deserializer);
    var var_startTime = sse_decode_String(deserializer);
    var var_endTime = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    return RTimetable(
      serial: var_serial,
      day: var_day,
      slot: var_slot,
      courseCode: var_courseCode,
      courseType: var_courseType,
      roomNo: var_roomNo,
      block: var_block,
      startTime: var_startTime,
      endTime: var_endTime,
      name: var_name,
    );
  }

  @protected
  (bool, String) sse_decode_record_bool_string(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_bool(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (bool, String, List<RAtCourse>)
  sse_decode_record_bool_string_list_r_at_course(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_bool(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    var var_field2 = sse_decode_list_r_at_course(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  (bool, String, List<RAttendanceList>)
  sse_decode_record_bool_string_list_r_attendance_list(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_bool(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    var var_field2 = sse_decode_list_r_attendance_list(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  (bool, String, List<RTimetable>)
  sse_decode_record_bool_string_list_r_timetable(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_bool(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    var var_field2 = sse_decode_list_r_timetable(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  (bool, String, List<String>) sse_decode_record_bool_string_list_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_bool(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    var var_field2 = sse_decode_list_String(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
    Iclient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as IclientImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
    Iclient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as IclientImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
    Iclient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as IclientImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIclient(
    Iclient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as IclientImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_r_at_course(
    List<RAtCourse> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_r_at_course(item, serializer);
    }
  }

  @protected
  void sse_encode_list_r_attendance_list(
    List<RAttendanceList> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_r_attendance_list(item, serializer);
    }
  }

  @protected
  void sse_encode_list_r_timetable(
    List<RTimetable> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_r_timetable(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_r_at_course(RAtCourse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.category, serializer);
    sse_encode_String(self.courseName, serializer);
    sse_encode_String(self.courseCode, serializer);
    sse_encode_String(self.courseType, serializer);
    sse_encode_String(self.facultyDetail, serializer);
    sse_encode_String(self.classesAttended, serializer);
    sse_encode_String(self.totalClasses, serializer);
    sse_encode_String(self.attendancePercentage, serializer);
    sse_encode_String(self.attendenceFatCat, serializer);
    sse_encode_String(self.debarStatus, serializer);
    sse_encode_String(self.courseId, serializer);
  }

  @protected
  void sse_encode_r_attendance_list(
    RAttendanceList self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.date, serializer);
    sse_encode_String(self.slot, serializer);
    sse_encode_String(self.dayTime, serializer);
    sse_encode_String(self.status, serializer);
    sse_encode_String(self.remark, serializer);
  }

  @protected
  void sse_encode_r_timetable(RTimetable self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.day, serializer);
    sse_encode_String(self.slot, serializer);
    sse_encode_String(self.courseCode, serializer);
    sse_encode_String(self.courseType, serializer);
    sse_encode_String(self.roomNo, serializer);
    sse_encode_String(self.block, serializer);
    sse_encode_String(self.startTime, serializer);
    sse_encode_String(self.endTime, serializer);
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_record_bool_string(
    (bool, String) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_bool_string_list_r_at_course(
    (bool, String, List<RAtCourse>) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
    sse_encode_list_r_at_course(self.$3, serializer);
  }

  @protected
  void sse_encode_record_bool_string_list_r_attendance_list(
    (bool, String, List<RAttendanceList>) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
    sse_encode_list_r_attendance_list(self.$3, serializer);
  }

  @protected
  void sse_encode_record_bool_string_list_r_timetable(
    (bool, String, List<RTimetable>) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
    sse_encode_list_r_timetable(self.$3, serializer);
  }

  @protected
  void sse_encode_record_bool_string_list_string(
    (bool, String, List<String>) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
    sse_encode_list_String(self.$3, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class IclientImpl extends RustOpaque implements Iclient {
  // Not to be used by end users
  IclientImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  IclientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Iclient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Iclient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_IclientPtr,
  );

  String get captcha => RustLib.instance.api
      .crateApiVtopClientIclientAutoAccessorGetCaptcha(that: this);

  String get csrf => RustLib.instance.api
      .crateApiVtopClientIclientAutoAccessorGetCsrf(that: this);

  bool get loginactive => RustLib.instance.api
      .crateApiVtopClientIclientAutoAccessorGetLoginactive(that: this);

  String get username => RustLib.instance.api
      .crateApiVtopClientIclientAutoAccessorGetUsername(that: this);

  set captcha(String captcha) =>
      RustLib.instance.api.crateApiVtopClientIclientAutoAccessorSetCaptcha(
        that: this,
        captcha: captcha,
      );

  set csrf(String csrf) => RustLib.instance.api
      .crateApiVtopClientIclientAutoAccessorSetCsrf(that: this, csrf: csrf);

  set loginactive(bool loginactive) =>
      RustLib.instance.api.crateApiVtopClientIclientAutoAccessorSetLoginactive(
        that: this,
        loginactive: loginactive,
      );

  set username(String username) =>
      RustLib.instance.api.crateApiVtopClientIclientAutoAccessorSetUsername(
        that: this,
        username: username,
      );

  Future<(bool, String)> getAttendance({required String semid}) => RustLib
      .instance
      .api
      .crateApiVtopClientIclientGetAttendance(that: this, semid: semid);

  Future<(bool, String)> getAttendancePage() => RustLib.instance.api
      .crateApiVtopClientIclientGetAttendancePage(that: this);

  Future<(bool, String)> getCourseClasses({
    required String semid,
    required String classid,
  }) => RustLib.instance.api.crateApiVtopClientIclientGetCourseClasses(
    that: this,
    semid: semid,
    classid: classid,
  );

  Future<(bool, String)> getCourseCourses({required String semid}) => RustLib
      .instance
      .api
      .crateApiVtopClientIclientGetCourseCourses(that: this, semid: semid);

  Future<(bool, String)> getCourseDlist({
    required String semid,
    required String classid,
    required String erpId,
  }) => RustLib.instance.api.crateApiVtopClientIclientGetCourseDlist(
    that: this,
    semid: semid,
    classid: classid,
    erpId: erpId,
  );

  Future<(bool, String)> getCoursePage() =>
      RustLib.instance.api.crateApiVtopClientIclientGetCoursePage(that: this);

  Future<(bool, String)> getExamShedule({required String semid}) => RustLib
      .instance
      .api
      .crateApiVtopClientIclientGetExamShedule(that: this, semid: semid);

  Future<(bool, String)> getExamSheduleSems() => RustLib.instance.api
      .crateApiVtopClientIclientGetExamSheduleSems(that: this);

  Future<(bool, String)> getFullAttendance({
    required String courseId,
    required String semid,
    required String courseType,
  }) => RustLib.instance.api.crateApiVtopClientIclientGetFullAttendance(
    that: this,
    courseId: courseId,
    semid: semid,
    courseType: courseType,
  );

  Future<String?> getLoginPageError() => RustLib.instance.api
      .crateApiVtopClientIclientGetLoginPageError(that: this);

  Future<(bool, String)> getMarksList({required String semid}) => RustLib
      .instance
      .api
      .crateApiVtopClientIclientGetMarksList(that: this, semid: semid);

  Future<(bool, String)> getMarksPage() =>
      RustLib.instance.api.crateApiVtopClientIclientGetMarksPage(that: this);

  Future<(bool, String)> getTimetable({required String semid}) => RustLib
      .instance
      .api
      .crateApiVtopClientIclientGetTimetable(that: this, semid: semid);

  Future<(bool, String)> getTimetablePage() => RustLib.instance.api
      .crateApiVtopClientIclientGetTimetablePage(that: this);

  Future<(bool, String)> login({required String cap}) =>
      RustLib.instance.api.crateApiVtopClientIclientLogin(that: this, cap: cap);

  Future<(bool, String)> loginPageload() =>
      RustLib.instance.api.crateApiVtopClientIclientLoginPageload(that: this);

  Future<void> updateCred({
    required String username,
    required String password,
  }) => RustLib.instance.api.crateApiVtopClientIclientUpdateCred(
    that: this,
    username: username,
    password: password,
  );
}
