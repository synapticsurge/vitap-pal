// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`

class RAtCourse {
  final String serial;
  final String category;
  final String courseName;
  final String courseCode;
  final String courseType;
  final String facultyDetail;
  final String classesAttended;
  final String totalClasses;
  final String attendancePercentage;
  final String attendenceFatCat;
  final String debarStatus;
  final String courseId;

  const RAtCourse({
    required this.serial,
    required this.category,
    required this.courseName,
    required this.courseCode,
    required this.courseType,
    required this.facultyDetail,
    required this.classesAttended,
    required this.totalClasses,
    required this.attendancePercentage,
    required this.attendenceFatCat,
    required this.debarStatus,
    required this.courseId,
  });

  @override
  int get hashCode =>
      serial.hashCode ^
      category.hashCode ^
      courseName.hashCode ^
      courseCode.hashCode ^
      courseType.hashCode ^
      facultyDetail.hashCode ^
      classesAttended.hashCode ^
      totalClasses.hashCode ^
      attendancePercentage.hashCode ^
      attendenceFatCat.hashCode ^
      debarStatus.hashCode ^
      courseId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RAtCourse &&
          runtimeType == other.runtimeType &&
          serial == other.serial &&
          category == other.category &&
          courseName == other.courseName &&
          courseCode == other.courseCode &&
          courseType == other.courseType &&
          facultyDetail == other.facultyDetail &&
          classesAttended == other.classesAttended &&
          totalClasses == other.totalClasses &&
          attendancePercentage == other.attendancePercentage &&
          attendenceFatCat == other.attendenceFatCat &&
          debarStatus == other.debarStatus &&
          courseId == other.courseId;
}

class RAttendanceList {
  final String serial;
  final String date;
  final String slot;
  final String dayTime;
  final String status;
  final String remark;

  const RAttendanceList({
    required this.serial,
    required this.date,
    required this.slot,
    required this.dayTime,
    required this.status,
    required this.remark,
  });

  @override
  int get hashCode =>
      serial.hashCode ^
      date.hashCode ^
      slot.hashCode ^
      dayTime.hashCode ^
      status.hashCode ^
      remark.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RAttendanceList &&
          runtimeType == other.runtimeType &&
          serial == other.serial &&
          date == other.date &&
          slot == other.slot &&
          dayTime == other.dayTime &&
          status == other.status &&
          remark == other.remark;
}

class RMarksCourse {
  final String serial;
  final String coursecode;
  final String coursetitle;
  final String coursetype;
  final String faculity;
  final String slot;
  final List<String> marks;

  const RMarksCourse({
    required this.serial,
    required this.coursecode,
    required this.coursetitle,
    required this.coursetype,
    required this.faculity,
    required this.slot,
    required this.marks,
  });

  @override
  int get hashCode =>
      serial.hashCode ^
      coursecode.hashCode ^
      coursetitle.hashCode ^
      coursetype.hashCode ^
      faculity.hashCode ^
      slot.hashCode ^
      marks.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RMarksCourse &&
          runtimeType == other.runtimeType &&
          serial == other.serial &&
          coursecode == other.coursecode &&
          coursetitle == other.coursetitle &&
          coursetype == other.coursetype &&
          faculity == other.faculity &&
          slot == other.slot &&
          marks == other.marks;
}

class RTimetable {
  final String serial;
  final String day;
  final String slot;
  final String courseCode;
  final String courseType;
  final String roomNo;
  final String block;
  final String startTime;
  final String endTime;
  final String name;

  const RTimetable({
    required this.serial,
    required this.day,
    required this.slot,
    required this.courseCode,
    required this.courseType,
    required this.roomNo,
    required this.block,
    required this.startTime,
    required this.endTime,
    required this.name,
  });

  @override
  int get hashCode =>
      serial.hashCode ^
      day.hashCode ^
      slot.hashCode ^
      courseCode.hashCode ^
      courseType.hashCode ^
      roomNo.hashCode ^
      block.hashCode ^
      startTime.hashCode ^
      endTime.hashCode ^
      name.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RTimetable &&
          runtimeType == other.runtimeType &&
          serial == other.serial &&
          day == other.day &&
          slot == other.slot &&
          courseCode == other.courseCode &&
          courseType == other.courseType &&
          roomNo == other.roomNo &&
          block == other.block &&
          startTime == other.startTime &&
          endTime == other.endTime &&
          name == other.name;
}

class RscheduleCourse {
  final String serial;
  final String slot;
  final String courseName;
  final String courseCode;
  final String courseType;
  final String courseId;
  final String examDate;
  final String examSession;
  final String reportingTime;
  final String examTime;
  final String venue;
  final String seatLocation;
  final String seatNo;

  const RscheduleCourse({
    required this.serial,
    required this.slot,
    required this.courseName,
    required this.courseCode,
    required this.courseType,
    required this.courseId,
    required this.examDate,
    required this.examSession,
    required this.reportingTime,
    required this.examTime,
    required this.venue,
    required this.seatLocation,
    required this.seatNo,
  });

  @override
  int get hashCode =>
      serial.hashCode ^
      slot.hashCode ^
      courseName.hashCode ^
      courseCode.hashCode ^
      courseType.hashCode ^
      courseId.hashCode ^
      examDate.hashCode ^
      examSession.hashCode ^
      reportingTime.hashCode ^
      examTime.hashCode ^
      venue.hashCode ^
      seatLocation.hashCode ^
      seatNo.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RscheduleCourse &&
          runtimeType == other.runtimeType &&
          serial == other.serial &&
          slot == other.slot &&
          courseName == other.courseName &&
          courseCode == other.courseCode &&
          courseType == other.courseType &&
          courseId == other.courseId &&
          examDate == other.examDate &&
          examSession == other.examSession &&
          reportingTime == other.reportingTime &&
          examTime == other.examTime &&
          venue == other.venue &&
          seatLocation == other.seatLocation &&
          seatNo == other.seatNo;
}

class RscheduleExam {
  final String examType;
  final List<RscheduleCourse> course;

  const RscheduleExam({required this.examType, required this.course});

  @override
  int get hashCode => examType.hashCode ^ course.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RscheduleExam &&
          runtimeType == other.runtimeType &&
          examType == other.examType &&
          course == other.course;
}
